[
  {
    "objectID": "east_asia_monsoon.html",
    "href": "east_asia_monsoon.html",
    "title": "Geospatial Climate Analysis",
    "section": "",
    "text": "Southeast Asia is one of the regions where a wide range of agricultural practices has been carried out. Despite the overwhelming influence of the market economy, the tireless efforts of smallholder farmers over more than 1,000 years have created remarkably diverse array of farming systems. For example, in rice farming, which has long been the foundation of food security, farmers have developed numerous rice varieties, adaptive techniques to cope with erratic rainfall, fluctuations in crop prices, and, at times, strategies to escape the control of dominant political powers (Scott 2010). These farming techniques are well adapted to their local ecosystems and socioeconomic conditions.\nWhile these agricultural practices have evolved in response to micro-landscape, much like the Darwinian evolution of living organisms, agricultural scientists have sought to construct overarching frameworks to explain farmers’ behaviors. Needless to say, socioeconomic factors such as food productions, crop market price, demographic dynamics (Boserup 1965) strongly influence these behaviors, but natural conditions also play a significant role in shaping farming practices over the long run.\nAbundant natural resources and highly variable natural conditions are often considered as the two main factors shaping agriculture in this region. However, these two are frequently at odds. Interestingly,there is a clear divide among researchers: some emphasize environmental instability, while others highlight resource abundance. Researchers focusing on mainland Southeast Asia, such as Thailand, Laos, Myanmar, Vietnam, and Cambodia, tend to stress how farmers adapt to unstable and unpredictable natural conditions, especially precipitation (Fukui and Fukui 1993, Kono et al. 2012). On the other hand, scholars studying maritime Southeast Asia often emphasize the area’s rich biomass and high primary productivity (Tanaka 2010).\nIn this short essay, I aim to examine whether the instability or the abundance of natural resources has been the primary factor shaping agricultural systems in the long run, or whether both factors have played complementary roles. I also outline the methodological steps taken to approach this research questions.\n\n\nThe East Asian Monsoon region is unique in terms of its rainfall patterns (Kira 2012). Unlike other tropical and subtropical areas, it lacks arid zones. As a result, vegetation transitions continuously along temperature gradients, contributing to exceptionally rich biodiversity. This region also plays a vital role in agricultural production, making it and ideal context for comparing temperate and tropical farming systems.\nRather than focusing on meteorological perspectives, I aim to approach this topic from an agricultural standpoint to gain deeper insights into farming practices that sustains a significant portion of population.\n\n\n\n\n\n\n\nif (grepl(\"monsoon_asia\", getwd())) {\n    load(\".RData\")\n} else {\n    setwd(\"monsoon_asia/\")\n    load(\".RData\")\n}\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(rgeoboundaries)\nlibrary(sf)\nlibrary(ncdf4)\n# library(raster) duplication. The terra works instead of this.\nlibrary(terra)\nlibrary(rlang)\nlibrary(utils)\nlibrary(R.utils)\nlibrary(leaflet)\nlibrary(leaflet.extras)\nlibrary(htmlwidgets)\nlibrary(tmap)\n\n\n\n\nVisit geoBoundaries. Also see (Moraga and Baker 2022).\n\n\n\nse_asia &lt;- c(\"THA\", \"LAO\", \"MYS\", \"IDN\", \"KHM\", \"MMR\", \"VNM\", \"TLS\", \"SGP\", \"BRN\", \"PHL\")\ne_asia &lt;- c(\"PRK\", \"KOR\", \"JPN\", \"CHN\", \"MNG\", \"TWN\")\neast_monsoon &lt;- c(se_asia, e_asia)\n\n\n\n\n\nlaos &lt;- gb_adm0(\"LAO\")\n# laos &lt;- geoboundaries(\"LAO\")\nplot(st_geometry(laos), graticule = TRUE, axes = TRUE)\n\n\n\n\nNational Boundary\n\n\n\n# plot(laos$geometry, graticule = TRUE, axes = TRUE)\n\n\n\n\n\nlaos_prov &lt;- gb_adm1(\"LAO\")\nplot(laos_prov$geometry, graticule = TRUE, axes = TRUE)\n\n\n\n\nProvincial Boundary\n\n\n\n\n\n\n\n\nlaos_dis &lt;- gb_adm2(\"LAO\")\nplot(laos_dis$geometry, graticule = TRUE, axes = TRUE)\n\n\n\n\nDistrict Boundary\n\n\n\n\n\n\n\n\n\nem_boundary &lt;- gb_adm0(east_monsoon)\n\n# Original data is too concise for the purpose, simplify the boundaries.\n\nem_boundary_simp &lt;- st_simplify(em_boundary, dTolerance = 0.01)\nplot(st_geometry(em_boundary_simp))\n\n\n\n\n\n\n\n\n\n\n\nMyanmar lies west of the specified longitude; therefore, replace China’s longitude value accordingly. Similarly, since Japan is located north of the specified latitude, replace China’s latitude value with that of Japan. Japan is also situated east of the specified longitude.\nThe research area includes a 3 km buffer. Given that 0.01 degrees correspond to approximately 1.11 km, appropriate adjustments should be made.\n\ntmp &lt;- em_boundary %&gt;% st_bbox\ntmp_xmin &lt;- em_boundary %&gt;% filter(shapeGroup == \"MMR\") %&gt;% st_bbox\ntmp_ymax &lt;- em_boundary %&gt;% filter(shapeGroup == \"JPN\") %&gt;% st_bbox\ntmp_xmax &lt;- em_boundary %&gt;% filter(shapeGroup == \"JPN\") %&gt;% st_bbox\ntmp_ymin &lt;- em_boundary %&gt;% filter(shapeGroup == \"IDN\") %&gt;% st_bbox\ntmp[[1]] &lt;- tmp_xmin[[1]]\ntmp[[4]] &lt;- tmp_ymax[[4]]\ntmp[[2]] &lt;- tmp_ymin[[2]]\ntmp[[3]] &lt;- tmp_xmax[[3]]\ntmp[1] &lt;- tmp[1] - 0.03\ntmp[2] &lt;- tmp[2] - 0.03\ntmp[3] &lt;- tmp[3] + 0.03\ntmp[4] &lt;- tmp[4] + 0.03\n\n\nUse st_as_sfc() %&gt;% st_sf() if you only have geometry data and need to manually create an sf object.\nst_as_sfc(x): Converts an object (like WKT, WKB, or a numeric matrix) into a simple feature geometry list-column (sfc).\nst_sf(sfc_object): Wraps the sfc object in a simple feature (sf) data frame.\n\n\naoi &lt;- tmp %&gt;% st_as_sfc %&gt;% st_sf\nplot(aoi, graticule = TRUE, axes = TRUE)\n\n\n\n\nArea of Interest East and Southeast Asia\n\n\n\n\n\n\n\n\n\ndir_leaflet &lt;- \"figures/leaflet/\"\nm &lt;- leaflet(aoi) %&gt;% addTiles() %&gt;% addPolygons(color = \"blue\", weight = 1, fillOpacity = 0.1)\nfilename &lt;- paste0(\"aoi\", \".html\")\nsaveWidget(m, paste0(dir_leaflet, filename), selfcontained = TRUE)\n\n\nleaflet(aoi) %&gt;% addTiles() %&gt;% addPolygons(color = \"blue\", weight = 1, fillOpacity = 0.1)\n\n\n\nArea of interest\n\n\n\n\n\n\ntmap_mode(\"view\")\np &lt;- tm_shape(aoi) + tm_borders(lwd = 2)\np\n\n\n\nArea of interest\n\n\n\n\n\n\n\nTerraClimate is a high-spatial resolution (4km) gridded dataset of monthly climate and hydroclimate for global land surfaces from 1958 to present ( TERRACLIMATE Dataset; Abatzoglou et al. (2018)).\nIn this research, monthly data for precipitation, temperature (max and min), climate water deficit, and potential and actual evapotranspiration provided in this database are used.\n\n\n\nNetCDF\n\nesri explains that NetCDF (network Common Data Form) is a file format for storing multidimensional scientific data (variables) such as temperature, humidity, pressure, wind speed, and direction.\n\nSpatRaster\n\nMethods to create a SpatRaster. These objects can be created from scratch, from a filename, or from another object.\nA SpatRaster represents a spatially referenced surface divided into three dimensional cells (rows, columns, and layers).\nWhen a SpatRaster is created from one or more files, it does not load the cell (pixel) values into memory (RAM). It only reads the parameters that describe the geometry of the SpatRaster, such as the number of rows and columns and the coordinate reference system. The actual values will be read when needed.\nNote that there are operating system level limitations to the number of files that can be opened simultaneously. Using a SpatRaster of very many files (e.g. 10,000) may cause R to crash when you use it in a computation. In situations like that you may need to split up the task or combine data into fewer (multi-layer) files. Also note that the GTiff format used for temporary files cannot store more than 65535 layers in a single file.\n(Source: R documentation)\n\n\n\nyears &lt;- seq(1958,2024)\nncpath &lt;- \"data/TerraClimate_data/\"\nncname &lt;- \"TerraClimate_ppt_\"\n\nfor (x in years){\n    ncfname &lt;- paste0(ncpath, ncname, x, \".nc\")\n    object &lt;- rast(ncfname, subds = \"ppt\")\n    assign(paste0(\"cl_ppt_\", x), object)\n}\nplot(cl_ppt_1958[[1]])\n\n\n\n\nPrecipitation distribution in January 1958\n\n\n\n\n\n\n\nCrop monthly precipitation data by AOI and save it to tif format file.\n\n\nras_dir &lt;- \"data/raster/\"\n\nsystem.time(\n    for (x in years) {\n        fname &lt;- get(paste0(\"cl_ppt_\", x))\n        object &lt;- crop(fname, aoi)\n        cname &lt;- paste0(\"mon_cl_ppt_\", x)\n        c_object &lt;- writeRaster(object,\n                                filename = file.path(ras_dir, paste0(cname, \".tif\")),\n                                overwrite = TRUE)\n        assign(cname, c_object)\n    }\n)\n\n\nMapping Precipitation\n\n\n# load data into R\nras_dir &lt;- \"data/raster/\"\nfor (x in years){\n    ncfname &lt;- paste0(ras_dir, \"mon_cl_ppt_\", x, \".tif\")\n    object &lt;- rast(ncfname)\n    assign(paste0(\"mon_cl_ppt_\", x), object)\n}\n\n# Display\nr &lt;- mon_cl_ppt_1958[[1]]\nr_pal &lt;- colorNumeric(palette = \"viridis\", domain = values(r), na.color = \"transparent\")\n\nleaflet() %&gt;%\n  addTiles() %&gt;%  # Add base map\n  addRasterImage(r, colors = r_pal, opacity = 0.8) %&gt;%\n  addLegend(pal = r_pal, values = values(r), title = \"Raster Values\")\n\n\n\nCropped precipitation distribution in January 1958\n\n\n\n\n\n\n\nCreating a multilayer object accommodating annual rainfalls from 1958 to 2024\n\n\n# Annual rainfall\nfhead &lt;- \"mon_cl_ppt_\"\nif (exists(\"a_rain\")) {\n    rm(a_rain)\n}\nfor (x in years) {\n    fname &lt;- paste0(fhead, x)\n    if (exists(fname)) {\n        rd00 &lt;- get(fname)\n        rd01 &lt;- app(rd00, sum) # calc() in the raster package\n        names(rd01) &lt;- x\n        if (!exists(\"a_rain\")) {\n            a_rain &lt;- rd01\n        } else {\n            a_rain &lt;- c(a_rain, rd01)\n        }\n    } else {\n        warning(paste0(\"The object does not exits: \", x))\n    }\n}\n\ncat(src(a_rain), \"\\n\")\n# newcrs &lt;- \"+proj=longlat +datum=WGS84\"\nnewcrs &lt;- \"EPSG:4326\"\na_rain &lt;- project(a_rain, newcrs)\na_rain &lt;- writeRaster(a_rain,\n    filename = file.path(\n        ras_dir,\n        \"a_rain.tif\"\n    ), overwrite = TRUE\n)\n\n\nMapping annual rainfall in 1958\n\nTmap\n\na_rain &lt;- rast(file.path(ras_dir, \"a_rain.tif\"))\ntmap_mode(\"view\")\ntm_shape(a_rain[[1]]) + tm_raster()\n\n\n\n\n\n\n\nLeaflet\n\nr_pal &lt;- colorNumeric(palette = \"viridis\", domain = values(a_rain[[1]]), na.color = \"transparent\")\n\n# for R in docker\n# base_path &lt;- \"./data/raster\"\n# r &lt;- raster(file.path(base_path, \"ar_1958.gri\"))\n\nleaflet() %&gt;%\n    addTiles() %&gt;% # Add base map\n    addRasterImage(a_rain[[1]], colors = r_pal, opacity = 0.8) %&gt;%\n    addLegend(pal = r_pal, values = values(a_rain[[1]]),\n              title = \"Raster Values\")\n\n\n\n\n\n\n\n\n\nmax and min temperature, ppt, aat, soil moisture, and def\n\nyears &lt;- seq(1958, 2024)\nncpath &lt;- \"data/TerraClimate_data/\"\nncname &lt;- \"TerraClimate_\"\nvariables &lt;- c(\"aet\", \"def\", \"pet\", \"q\", \"tmax\", \"tmin\")\n\nfor (var in variables) {\n    for (ye in years) {\n        ncfname &lt;- paste0(ncpath, ncname, var, \"_\", ye, \".nc\")\n        object &lt;- rast(ncfname,  subds = cli)\n        assign(paste0(\"cl_\", var, \"_\", ye), object)\n    }\n    printf(\"\\n%s has been successfully imported.\", var)\n}\n\nCropping climate data by AOI.\n\nfor (var in variables) {\n    for (ye in years) {\n        fname &lt;- paste0(\"cl_\", var, \"_\", ye)\n        fdata &lt;- get(fname)\n        object &lt;- crop(fdata, aoi)\n        cname &lt;- paste0(\"mon_\", fname)\n        c_object &lt;- writeRaster(object,\n            filename = file.path(\n                ras_dir,\n                paste0(cname, \".tif\")\n            ),\n            overwrite = TRUE\n        )\n        assign(cname, c_object)\n    }\n}\n\nRemove unnecessary intermediate objects\n\nrm(list = ls(pattern = \"^cl_\"))\nrm(list = ls(pattern = \"^mon_\"))\n\n\n\n\n\n\n\nThe Potential Net Primary Production (NPP) is estimated using Miami model, as presented in Lieth (1973)(Lieth (1973)).\n\\[\nNPP(Temp, Precip) = min((\\frac{a}{1+exp(b-c*Temp)}), (d(1-exp(e*(Precip)))))\n\\]\nWhere \\(Temp\\) is the mean annual temperature (°C), \\(Precip\\) is the mean annual precipitation (mm/year),\nThe constants are empirically determined as: \\[\n\\begin{align}\na &= 3000 \\\\\nb &= 1.315 \\\\\nc &= 0.119 \\\\\ne &= 0.000664 \\\\\n\\end{align}\n\\]\nThis model estimates NPP as the minimum of two functions: one driven by temperature and the other by precipitation.\nFirst of all, we compute mean annual temperature.\n\nyears &lt;- seq(1958, 2024)\nras_dir &lt;- \"data/raster/\"\n\nfor (var in c(\"tmax\", \"tmin\")) {\n    for (year in years) {\n        fname &lt;- paste0(\"mon_cl_\", var, \"_\", year)\n        file_name &lt;- paste0(fname, \".tif\")\n        rasd &lt;- rast(file.path(ras_dir, file_name))\n        assign(fname, rasd)\n    }\n}\n\nvar &lt;- \"tmin\"\nfhead &lt;- paste0(\"mon_cl_\", var, \"_\")\nobjname &lt;- paste0(\"a_\", var)\nif (exists(objname)) {\n    rm(list = objname)\n}\nfor (year in years) {\n    fname &lt;- paste0(fhead, year)\n    if (exists(fname)) {\n        rd00 &lt;- get(fname)\n        rd01 &lt;- app(rd00, mean)\n        names(rd01) &lt;- year\n        if (!exists(objname)) {\n            assign(objname, rd01)\n        } else {\n            existing &lt;- get(objname)\n            combined &lt;- c(existing, rd01)\n            assign(objname, combined)\n        }\n    } else {\n       warning(paste0(\"The object does not exits: \", year))\n    }\n    printf(\"%d is successfully imported\\n\", year)\n}\n\nvars &lt;- c(\"tmax\", \"tmin\")\nfor (var in vars) {\n    fname &lt;- paste0(\"a_\", var)\n    writeRaster(fname, filename = file.path(\n        ras_dir,\n        paste0(fname, \".tif\")\n    ), overwrite = TRUE)\n}\nrm(list = ls(pattern = \"^mon_\"))\n\nNow, we can compute mean annual temperature.\n\nvars &lt;- c(\"a_tmax\", \"a_tmin\")\nfor (var in vars) {\n    fdata &lt;- rast(file.path(ras_dir, paste0(var, \".tif\")))\n    assign(var, fdata)\n}\n\n# Calculate mean max temperature and min temperature for each layer\n\na_tmean = (a_tmin + a_tmax) / 2\n\nwriteRaster(a_tmean, filename = file.path(\n    ras_dir, \"a_tmean.tif\"\n), overwrite = TRUE)\n\nFinally, we can estimate NPP using the Miami model.\n\nvars &lt;- c(\"a_rain\", \"a_tmean\")\nfor (var in vars) {\n    fdata &lt;- rast(file.path(ras_dir, paste0(var, \".tif\")))\n    assign(var, fdata)\n}\n\nfun_t &lt;- function(x) {\n    3000 / (1 + exp(1.315 - 0.119 * x))\n}\nfun_p &lt;- function(x) {\n    3000 * (1 - exp(-0.000664 * x))\n}\nnpp_t &lt;- app(a_tmean, fun_t)\nnpp_p &lt;- app(a_rain, fun_p)\na_npp &lt;- min(npp_t, npp_p)\n\nwriteRaster(npp_t, filename = file.path(ras_dir, \"npp_t.tif\"), overwrite = TRUE)\nwriteRaster(npp_p, filename = file.path(ras_dir, \"npp_p.tif\"), overwrite = TRUE)\nwriteRaster(a_npp, filename = file.path(ras_dir, \"a_npp.tif\"), overwrite = TRUE)\n\n\n##### mean annual npp for all\n\na_npp &lt;- rast(file.path(ras_dir, paste0(\"a_npp.tif\")))\nrmap &lt;- subset(a_npp, 1)\nmax_val &lt;- global(rmap, fun = \"max\", na.rm = TRUE)[[1]]\nnpp_legend &lt;- c(0, 200, seq(500, 2500, by = 500), max_val)\n\ntmap_mode(\"view\")\np &lt;- tm_shape(rmap) + tm_raster(col.scale = tm_scale(col = npp_legend, values = \"brewer.bu_gn\"))\np\n\n\n\n\nNPP in 1958"
  },
  {
    "objectID": "east_asia_monsoon.html#introduction",
    "href": "east_asia_monsoon.html#introduction",
    "title": "Geospatial Climate Analysis",
    "section": "",
    "text": "Southeast Asia is one of the regions where a wide range of agricultural practices has been carried out. Despite the overwhelming influence of the market economy, the tireless efforts of smallholder farmers over more than 1,000 years have created remarkably diverse array of farming systems. For example, in rice farming, which has long been the foundation of food security, farmers have developed numerous rice varieties, adaptive techniques to cope with erratic rainfall, fluctuations in crop prices, and, at times, strategies to escape the control of dominant political powers (Scott 2010). These farming techniques are well adapted to their local ecosystems and socioeconomic conditions.\nWhile these agricultural practices have evolved in response to micro-landscape, much like the Darwinian evolution of living organisms, agricultural scientists have sought to construct overarching frameworks to explain farmers’ behaviors. Needless to say, socioeconomic factors such as food productions, crop market price, demographic dynamics (Boserup 1965) strongly influence these behaviors, but natural conditions also play a significant role in shaping farming practices over the long run.\nAbundant natural resources and highly variable natural conditions are often considered as the two main factors shaping agriculture in this region. However, these two are frequently at odds. Interestingly,there is a clear divide among researchers: some emphasize environmental instability, while others highlight resource abundance. Researchers focusing on mainland Southeast Asia, such as Thailand, Laos, Myanmar, Vietnam, and Cambodia, tend to stress how farmers adapt to unstable and unpredictable natural conditions, especially precipitation (Fukui and Fukui 1993, Kono et al. 2012). On the other hand, scholars studying maritime Southeast Asia often emphasize the area’s rich biomass and high primary productivity (Tanaka 2010).\nIn this short essay, I aim to examine whether the instability or the abundance of natural resources has been the primary factor shaping agricultural systems in the long run, or whether both factors have played complementary roles. I also outline the methodological steps taken to approach this research questions.\n\n\nThe East Asian Monsoon region is unique in terms of its rainfall patterns (Kira 2012). Unlike other tropical and subtropical areas, it lacks arid zones. As a result, vegetation transitions continuously along temperature gradients, contributing to exceptionally rich biodiversity. This region also plays a vital role in agricultural production, making it and ideal context for comparing temperate and tropical farming systems.\nRather than focusing on meteorological perspectives, I aim to approach this topic from an agricultural standpoint to gain deeper insights into farming practices that sustains a significant portion of population."
  },
  {
    "objectID": "east_asia_monsoon.html#method",
    "href": "east_asia_monsoon.html#method",
    "title": "Geospatial Climate Analysis",
    "section": "",
    "text": "if (grepl(\"monsoon_asia\", getwd())) {\n    load(\".RData\")\n} else {\n    setwd(\"monsoon_asia/\")\n    load(\".RData\")\n}\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(rgeoboundaries)\nlibrary(sf)\nlibrary(ncdf4)\n# library(raster) duplication. The terra works instead of this.\nlibrary(terra)\nlibrary(rlang)\nlibrary(utils)\nlibrary(R.utils)\nlibrary(leaflet)\nlibrary(leaflet.extras)\nlibrary(htmlwidgets)\nlibrary(tmap)\n\n\n\n\nVisit geoBoundaries. Also see (Moraga and Baker 2022).\n\n\n\nse_asia &lt;- c(\"THA\", \"LAO\", \"MYS\", \"IDN\", \"KHM\", \"MMR\", \"VNM\", \"TLS\", \"SGP\", \"BRN\", \"PHL\")\ne_asia &lt;- c(\"PRK\", \"KOR\", \"JPN\", \"CHN\", \"MNG\", \"TWN\")\neast_monsoon &lt;- c(se_asia, e_asia)\n\n\n\n\n\nlaos &lt;- gb_adm0(\"LAO\")\n# laos &lt;- geoboundaries(\"LAO\")\nplot(st_geometry(laos), graticule = TRUE, axes = TRUE)\n\n\n\n\nNational Boundary\n\n\n\n# plot(laos$geometry, graticule = TRUE, axes = TRUE)\n\n\n\n\n\nlaos_prov &lt;- gb_adm1(\"LAO\")\nplot(laos_prov$geometry, graticule = TRUE, axes = TRUE)\n\n\n\n\nProvincial Boundary\n\n\n\n\n\n\n\n\nlaos_dis &lt;- gb_adm2(\"LAO\")\nplot(laos_dis$geometry, graticule = TRUE, axes = TRUE)\n\n\n\n\nDistrict Boundary\n\n\n\n\n\n\n\n\n\nem_boundary &lt;- gb_adm0(east_monsoon)\n\n# Original data is too concise for the purpose, simplify the boundaries.\n\nem_boundary_simp &lt;- st_simplify(em_boundary, dTolerance = 0.01)\nplot(st_geometry(em_boundary_simp))\n\n\n\n\n\n\n\n\n\n\n\nMyanmar lies west of the specified longitude; therefore, replace China’s longitude value accordingly. Similarly, since Japan is located north of the specified latitude, replace China’s latitude value with that of Japan. Japan is also situated east of the specified longitude.\nThe research area includes a 3 km buffer. Given that 0.01 degrees correspond to approximately 1.11 km, appropriate adjustments should be made.\n\ntmp &lt;- em_boundary %&gt;% st_bbox\ntmp_xmin &lt;- em_boundary %&gt;% filter(shapeGroup == \"MMR\") %&gt;% st_bbox\ntmp_ymax &lt;- em_boundary %&gt;% filter(shapeGroup == \"JPN\") %&gt;% st_bbox\ntmp_xmax &lt;- em_boundary %&gt;% filter(shapeGroup == \"JPN\") %&gt;% st_bbox\ntmp_ymin &lt;- em_boundary %&gt;% filter(shapeGroup == \"IDN\") %&gt;% st_bbox\ntmp[[1]] &lt;- tmp_xmin[[1]]\ntmp[[4]] &lt;- tmp_ymax[[4]]\ntmp[[2]] &lt;- tmp_ymin[[2]]\ntmp[[3]] &lt;- tmp_xmax[[3]]\ntmp[1] &lt;- tmp[1] - 0.03\ntmp[2] &lt;- tmp[2] - 0.03\ntmp[3] &lt;- tmp[3] + 0.03\ntmp[4] &lt;- tmp[4] + 0.03\n\n\nUse st_as_sfc() %&gt;% st_sf() if you only have geometry data and need to manually create an sf object.\nst_as_sfc(x): Converts an object (like WKT, WKB, or a numeric matrix) into a simple feature geometry list-column (sfc).\nst_sf(sfc_object): Wraps the sfc object in a simple feature (sf) data frame.\n\n\naoi &lt;- tmp %&gt;% st_as_sfc %&gt;% st_sf\nplot(aoi, graticule = TRUE, axes = TRUE)\n\n\n\n\nArea of Interest East and Southeast Asia\n\n\n\n\n\n\n\n\n\ndir_leaflet &lt;- \"figures/leaflet/\"\nm &lt;- leaflet(aoi) %&gt;% addTiles() %&gt;% addPolygons(color = \"blue\", weight = 1, fillOpacity = 0.1)\nfilename &lt;- paste0(\"aoi\", \".html\")\nsaveWidget(m, paste0(dir_leaflet, filename), selfcontained = TRUE)\n\n\nleaflet(aoi) %&gt;% addTiles() %&gt;% addPolygons(color = \"blue\", weight = 1, fillOpacity = 0.1)\n\n\n\nArea of interest\n\n\n\n\n\n\ntmap_mode(\"view\")\np &lt;- tm_shape(aoi) + tm_borders(lwd = 2)\np\n\n\n\nArea of interest\n\n\n\n\n\n\n\nTerraClimate is a high-spatial resolution (4km) gridded dataset of monthly climate and hydroclimate for global land surfaces from 1958 to present ( TERRACLIMATE Dataset; Abatzoglou et al. (2018)).\nIn this research, monthly data for precipitation, temperature (max and min), climate water deficit, and potential and actual evapotranspiration provided in this database are used.\n\n\n\nNetCDF\n\nesri explains that NetCDF (network Common Data Form) is a file format for storing multidimensional scientific data (variables) such as temperature, humidity, pressure, wind speed, and direction.\n\nSpatRaster\n\nMethods to create a SpatRaster. These objects can be created from scratch, from a filename, or from another object.\nA SpatRaster represents a spatially referenced surface divided into three dimensional cells (rows, columns, and layers).\nWhen a SpatRaster is created from one or more files, it does not load the cell (pixel) values into memory (RAM). It only reads the parameters that describe the geometry of the SpatRaster, such as the number of rows and columns and the coordinate reference system. The actual values will be read when needed.\nNote that there are operating system level limitations to the number of files that can be opened simultaneously. Using a SpatRaster of very many files (e.g. 10,000) may cause R to crash when you use it in a computation. In situations like that you may need to split up the task or combine data into fewer (multi-layer) files. Also note that the GTiff format used for temporary files cannot store more than 65535 layers in a single file.\n(Source: R documentation)\n\n\n\nyears &lt;- seq(1958,2024)\nncpath &lt;- \"data/TerraClimate_data/\"\nncname &lt;- \"TerraClimate_ppt_\"\n\nfor (x in years){\n    ncfname &lt;- paste0(ncpath, ncname, x, \".nc\")\n    object &lt;- rast(ncfname, subds = \"ppt\")\n    assign(paste0(\"cl_ppt_\", x), object)\n}\nplot(cl_ppt_1958[[1]])\n\n\n\n\nPrecipitation distribution in January 1958\n\n\n\n\n\n\n\nCrop monthly precipitation data by AOI and save it to tif format file.\n\n\nras_dir &lt;- \"data/raster/\"\n\nsystem.time(\n    for (x in years) {\n        fname &lt;- get(paste0(\"cl_ppt_\", x))\n        object &lt;- crop(fname, aoi)\n        cname &lt;- paste0(\"mon_cl_ppt_\", x)\n        c_object &lt;- writeRaster(object,\n                                filename = file.path(ras_dir, paste0(cname, \".tif\")),\n                                overwrite = TRUE)\n        assign(cname, c_object)\n    }\n)\n\n\nMapping Precipitation\n\n\n# load data into R\nras_dir &lt;- \"data/raster/\"\nfor (x in years){\n    ncfname &lt;- paste0(ras_dir, \"mon_cl_ppt_\", x, \".tif\")\n    object &lt;- rast(ncfname)\n    assign(paste0(\"mon_cl_ppt_\", x), object)\n}\n\n# Display\nr &lt;- mon_cl_ppt_1958[[1]]\nr_pal &lt;- colorNumeric(palette = \"viridis\", domain = values(r), na.color = \"transparent\")\n\nleaflet() %&gt;%\n  addTiles() %&gt;%  # Add base map\n  addRasterImage(r, colors = r_pal, opacity = 0.8) %&gt;%\n  addLegend(pal = r_pal, values = values(r), title = \"Raster Values\")\n\n\n\nCropped precipitation distribution in January 1958\n\n\n\n\n\n\n\nCreating a multilayer object accommodating annual rainfalls from 1958 to 2024\n\n\n# Annual rainfall\nfhead &lt;- \"mon_cl_ppt_\"\nif (exists(\"a_rain\")) {\n    rm(a_rain)\n}\nfor (x in years) {\n    fname &lt;- paste0(fhead, x)\n    if (exists(fname)) {\n        rd00 &lt;- get(fname)\n        rd01 &lt;- app(rd00, sum) # calc() in the raster package\n        names(rd01) &lt;- x\n        if (!exists(\"a_rain\")) {\n            a_rain &lt;- rd01\n        } else {\n            a_rain &lt;- c(a_rain, rd01)\n        }\n    } else {\n        warning(paste0(\"The object does not exits: \", x))\n    }\n}\n\ncat(src(a_rain), \"\\n\")\n# newcrs &lt;- \"+proj=longlat +datum=WGS84\"\nnewcrs &lt;- \"EPSG:4326\"\na_rain &lt;- project(a_rain, newcrs)\na_rain &lt;- writeRaster(a_rain,\n    filename = file.path(\n        ras_dir,\n        \"a_rain.tif\"\n    ), overwrite = TRUE\n)\n\n\nMapping annual rainfall in 1958\n\nTmap\n\na_rain &lt;- rast(file.path(ras_dir, \"a_rain.tif\"))\ntmap_mode(\"view\")\ntm_shape(a_rain[[1]]) + tm_raster()\n\n\n\n\n\n\n\nLeaflet\n\nr_pal &lt;- colorNumeric(palette = \"viridis\", domain = values(a_rain[[1]]), na.color = \"transparent\")\n\n# for R in docker\n# base_path &lt;- \"./data/raster\"\n# r &lt;- raster(file.path(base_path, \"ar_1958.gri\"))\n\nleaflet() %&gt;%\n    addTiles() %&gt;% # Add base map\n    addRasterImage(a_rain[[1]], colors = r_pal, opacity = 0.8) %&gt;%\n    addLegend(pal = r_pal, values = values(a_rain[[1]]),\n              title = \"Raster Values\")\n\n\n\n\n\n\n\n\n\nmax and min temperature, ppt, aat, soil moisture, and def\n\nyears &lt;- seq(1958, 2024)\nncpath &lt;- \"data/TerraClimate_data/\"\nncname &lt;- \"TerraClimate_\"\nvariables &lt;- c(\"aet\", \"def\", \"pet\", \"q\", \"tmax\", \"tmin\")\n\nfor (var in variables) {\n    for (ye in years) {\n        ncfname &lt;- paste0(ncpath, ncname, var, \"_\", ye, \".nc\")\n        object &lt;- rast(ncfname,  subds = cli)\n        assign(paste0(\"cl_\", var, \"_\", ye), object)\n    }\n    printf(\"\\n%s has been successfully imported.\", var)\n}\n\nCropping climate data by AOI.\n\nfor (var in variables) {\n    for (ye in years) {\n        fname &lt;- paste0(\"cl_\", var, \"_\", ye)\n        fdata &lt;- get(fname)\n        object &lt;- crop(fdata, aoi)\n        cname &lt;- paste0(\"mon_\", fname)\n        c_object &lt;- writeRaster(object,\n            filename = file.path(\n                ras_dir,\n                paste0(cname, \".tif\")\n            ),\n            overwrite = TRUE\n        )\n        assign(cname, c_object)\n    }\n}\n\nRemove unnecessary intermediate objects\n\nrm(list = ls(pattern = \"^cl_\"))\nrm(list = ls(pattern = \"^mon_\"))\n\n\n\n\n\n\n\nThe Potential Net Primary Production (NPP) is estimated using Miami model, as presented in Lieth (1973)(Lieth (1973)).\n\\[\nNPP(Temp, Precip) = min((\\frac{a}{1+exp(b-c*Temp)}), (d(1-exp(e*(Precip)))))\n\\]\nWhere \\(Temp\\) is the mean annual temperature (°C), \\(Precip\\) is the mean annual precipitation (mm/year),\nThe constants are empirically determined as: \\[\n\\begin{align}\na &= 3000 \\\\\nb &= 1.315 \\\\\nc &= 0.119 \\\\\ne &= 0.000664 \\\\\n\\end{align}\n\\]\nThis model estimates NPP as the minimum of two functions: one driven by temperature and the other by precipitation.\nFirst of all, we compute mean annual temperature.\n\nyears &lt;- seq(1958, 2024)\nras_dir &lt;- \"data/raster/\"\n\nfor (var in c(\"tmax\", \"tmin\")) {\n    for (year in years) {\n        fname &lt;- paste0(\"mon_cl_\", var, \"_\", year)\n        file_name &lt;- paste0(fname, \".tif\")\n        rasd &lt;- rast(file.path(ras_dir, file_name))\n        assign(fname, rasd)\n    }\n}\n\nvar &lt;- \"tmin\"\nfhead &lt;- paste0(\"mon_cl_\", var, \"_\")\nobjname &lt;- paste0(\"a_\", var)\nif (exists(objname)) {\n    rm(list = objname)\n}\nfor (year in years) {\n    fname &lt;- paste0(fhead, year)\n    if (exists(fname)) {\n        rd00 &lt;- get(fname)\n        rd01 &lt;- app(rd00, mean)\n        names(rd01) &lt;- year\n        if (!exists(objname)) {\n            assign(objname, rd01)\n        } else {\n            existing &lt;- get(objname)\n            combined &lt;- c(existing, rd01)\n            assign(objname, combined)\n        }\n    } else {\n       warning(paste0(\"The object does not exits: \", year))\n    }\n    printf(\"%d is successfully imported\\n\", year)\n}\n\nvars &lt;- c(\"tmax\", \"tmin\")\nfor (var in vars) {\n    fname &lt;- paste0(\"a_\", var)\n    writeRaster(fname, filename = file.path(\n        ras_dir,\n        paste0(fname, \".tif\")\n    ), overwrite = TRUE)\n}\nrm(list = ls(pattern = \"^mon_\"))\n\nNow, we can compute mean annual temperature.\n\nvars &lt;- c(\"a_tmax\", \"a_tmin\")\nfor (var in vars) {\n    fdata &lt;- rast(file.path(ras_dir, paste0(var, \".tif\")))\n    assign(var, fdata)\n}\n\n# Calculate mean max temperature and min temperature for each layer\n\na_tmean = (a_tmin + a_tmax) / 2\n\nwriteRaster(a_tmean, filename = file.path(\n    ras_dir, \"a_tmean.tif\"\n), overwrite = TRUE)\n\nFinally, we can estimate NPP using the Miami model.\n\nvars &lt;- c(\"a_rain\", \"a_tmean\")\nfor (var in vars) {\n    fdata &lt;- rast(file.path(ras_dir, paste0(var, \".tif\")))\n    assign(var, fdata)\n}\n\nfun_t &lt;- function(x) {\n    3000 / (1 + exp(1.315 - 0.119 * x))\n}\nfun_p &lt;- function(x) {\n    3000 * (1 - exp(-0.000664 * x))\n}\nnpp_t &lt;- app(a_tmean, fun_t)\nnpp_p &lt;- app(a_rain, fun_p)\na_npp &lt;- min(npp_t, npp_p)\n\nwriteRaster(npp_t, filename = file.path(ras_dir, \"npp_t.tif\"), overwrite = TRUE)\nwriteRaster(npp_p, filename = file.path(ras_dir, \"npp_p.tif\"), overwrite = TRUE)\nwriteRaster(a_npp, filename = file.path(ras_dir, \"a_npp.tif\"), overwrite = TRUE)\n\n\n##### mean annual npp for all\n\na_npp &lt;- rast(file.path(ras_dir, paste0(\"a_npp.tif\")))\nrmap &lt;- subset(a_npp, 1)\nmax_val &lt;- global(rmap, fun = \"max\", na.rm = TRUE)[[1]]\nnpp_legend &lt;- c(0, 200, seq(500, 2500, by = 500), max_val)\n\ntmap_mode(\"view\")\np &lt;- tm_shape(rmap) + tm_raster(col.scale = tm_scale(col = npp_legend, values = \"brewer.bu_gn\"))\np\n\n\n\n\nNPP in 1958"
  },
  {
    "objectID": "r_database.html",
    "href": "r_database.html",
    "title": "Database and R",
    "section": "",
    "text": "While using a database system is not necessary for our analysis, it is helpful to prepare for scenarios where data might need to be shared with other users or integrated with software such as QGIS. For this reason, it is beneficial to construct a system that allows R to access data stored in a database.\nAmong the available database systems, PostgreSQL-based PostGIS is one of few options that supports handling geographical data. Therefore, after setting up a Dockerized PostGIS instance, I use it to write and retrieve data instead of saving directly files directly to a directory.\nThe steps in my data analysis workflow are as follows:\n\nRead NetCDF files into R.\nCrop the necessary data from the original files.\nWrite all processed the database.\nClear all data objects when exiting the analysis.\nRetrieve the necessary data again when resuming the analysis.\n\n\n\n\nUnfortunately, the odbc package failed to connect to the database in my environment, so I use the RPostgres package instead.\nAdditionally, the rpostgis package does not support .rds file format. Therefore, all climate data must be saved as .tif format in advance.\n\n\n\n\n\n\n\ndocker compose up -d\ndocker ps\n\nCONTAINER ID   IMAGE                  COMMAND                  CREATED       STATUS       PORTS                                         NAMES\n28ce31d499fc   tomishing/postgis:17   \"docker-entrypoint.s…\"   3 hours ago   Up 3 hours   0.0.0.0:5432-&gt;5432/tcp, [::]:5432-&gt;5432/tcp   my_postgis\n\n\n\n\n\nlibrary(raster)\nlibrary(DBI)\nlibrary(RPostgres)\nlibrary(rpostgis)\nlibrary(R.utils)\n\n# Access to a database\n\ncon &lt;- dbConnect(\n    RPostgres::Postgres(),\n    dbname = \"climate\",\n    user = \"postgres\",\n    password = \"postgres\",\n    host = \"localhost\",\n    port = 5432\n)\n\n# Export monthly objects to the database\n\nfor (ya in years) {\n    for (mon in 1:12) {\n        m &lt;- sprintf(\"%02d\", mon)\n        pgtablename &lt;- paste0(\"r\", ya, m)\n        ar_obj &lt;- get(paste0(\"ar_\", ya))\n        rast &lt;- ar_obj[[mon]]\n        pgWriteRast(con, c(\"public\", pgtablename),\n            rast,\n            overwrite = TRUE\n        )\n    }\n    printf(\"\\n%d is successfully imported.\\n\", ya)\n}\n\n\n\n\n\nstart_time &lt;- Sys.time()\nfor (ya in years) {\n    filename &lt;- paste0(\"r_\", ya)\n    objects &lt;- raster()\n    for (mon in 1:12) {\n        m &lt;- sprintf(\"%02d\", mon)\n        pgtablename &lt;- paste0(\"r\", ya, m)\n        object &lt;- brick(pgGetRast(con, pgtablename))\n        names(object) &lt;- paste0(\"m\", m)\n        objects &lt;- addLayer(objects, object)\n        assign(filename, objects)\n    }\n    printf(\"\\n%d is successfully imported.\\n\", ya)\n}\nend_time &lt;- Sys.time()\ntime_elapsed &lt;- round(end_time - start_time, 2)\ntime_elapsed\n\nrm(list = ls(pattern = \"^r_\")\n\nIn my environment, it took over 8 minutes to import all precipitation data from PostGIS into R. Given the presence of additional climate datasets, using a database for analysis may not be practical. So far, saving the data to a local disk in RDS or TIFF format has proven more straightforward and convenient. Alternatively, SQL queries within the database can be considered, though they may not be efficient unless the area of interest (AOI) is well defined. However, using the database could be beneficial if your main analysis involves vector data.\n\n\n\n\n# Database\ndbListTables(con) # a list of tables\ndbGetQuery(con, \"select * from annual_rain\") # get the query result\ndbSendQuery(con, \"drop table if exists annual_rain \")\ndbDrop(con, \"a_rain\") # Drop a table\n\n# PostGIS\npgPostGIS(con) # check if PostgreSQL is enabled the extentions\npgListGeom(con, geog = TRUE) # list vector data table\npgListRast(con) # list raster data table\npgWriteRast(con, c(\"schema\", \"testraster\"), test)\n\n\n\n\n\n\n\nQGIS connects PostGIS climate database"
  },
  {
    "objectID": "r_database.html#creating-a-database-and-writing-and-retrieving-records",
    "href": "r_database.html#creating-a-database-and-writing-and-retrieving-records",
    "title": "Database and R",
    "section": "",
    "text": "While using a database system is not necessary for our analysis, it is helpful to prepare for scenarios where data might need to be shared with other users or integrated with software such as QGIS. For this reason, it is beneficial to construct a system that allows R to access data stored in a database.\nAmong the available database systems, PostgreSQL-based PostGIS is one of few options that supports handling geographical data. Therefore, after setting up a Dockerized PostGIS instance, I use it to write and retrieve data instead of saving directly files directly to a directory.\nThe steps in my data analysis workflow are as follows:\n\nRead NetCDF files into R.\nCrop the necessary data from the original files.\nWrite all processed the database.\nClear all data objects when exiting the analysis.\nRetrieve the necessary data again when resuming the analysis.\n\n\n\n\nUnfortunately, the odbc package failed to connect to the database in my environment, so I use the RPostgres package instead.\nAdditionally, the rpostgis package does not support .rds file format. Therefore, all climate data must be saved as .tif format in advance.\n\n\n\n\n\n\n\ndocker compose up -d\ndocker ps\n\nCONTAINER ID   IMAGE                  COMMAND                  CREATED       STATUS       PORTS                                         NAMES\n28ce31d499fc   tomishing/postgis:17   \"docker-entrypoint.s…\"   3 hours ago   Up 3 hours   0.0.0.0:5432-&gt;5432/tcp, [::]:5432-&gt;5432/tcp   my_postgis\n\n\n\n\n\nlibrary(raster)\nlibrary(DBI)\nlibrary(RPostgres)\nlibrary(rpostgis)\nlibrary(R.utils)\n\n# Access to a database\n\ncon &lt;- dbConnect(\n    RPostgres::Postgres(),\n    dbname = \"climate\",\n    user = \"postgres\",\n    password = \"postgres\",\n    host = \"localhost\",\n    port = 5432\n)\n\n# Export monthly objects to the database\n\nfor (ya in years) {\n    for (mon in 1:12) {\n        m &lt;- sprintf(\"%02d\", mon)\n        pgtablename &lt;- paste0(\"r\", ya, m)\n        ar_obj &lt;- get(paste0(\"ar_\", ya))\n        rast &lt;- ar_obj[[mon]]\n        pgWriteRast(con, c(\"public\", pgtablename),\n            rast,\n            overwrite = TRUE\n        )\n    }\n    printf(\"\\n%d is successfully imported.\\n\", ya)\n}\n\n\n\n\n\nstart_time &lt;- Sys.time()\nfor (ya in years) {\n    filename &lt;- paste0(\"r_\", ya)\n    objects &lt;- raster()\n    for (mon in 1:12) {\n        m &lt;- sprintf(\"%02d\", mon)\n        pgtablename &lt;- paste0(\"r\", ya, m)\n        object &lt;- brick(pgGetRast(con, pgtablename))\n        names(object) &lt;- paste0(\"m\", m)\n        objects &lt;- addLayer(objects, object)\n        assign(filename, objects)\n    }\n    printf(\"\\n%d is successfully imported.\\n\", ya)\n}\nend_time &lt;- Sys.time()\ntime_elapsed &lt;- round(end_time - start_time, 2)\ntime_elapsed\n\nrm(list = ls(pattern = \"^r_\")\n\nIn my environment, it took over 8 minutes to import all precipitation data from PostGIS into R. Given the presence of additional climate datasets, using a database for analysis may not be practical. So far, saving the data to a local disk in RDS or TIFF format has proven more straightforward and convenient. Alternatively, SQL queries within the database can be considered, though they may not be efficient unless the area of interest (AOI) is well defined. However, using the database could be beneficial if your main analysis involves vector data.\n\n\n\n\n# Database\ndbListTables(con) # a list of tables\ndbGetQuery(con, \"select * from annual_rain\") # get the query result\ndbSendQuery(con, \"drop table if exists annual_rain \")\ndbDrop(con, \"a_rain\") # Drop a table\n\n# PostGIS\npgPostGIS(con) # check if PostgreSQL is enabled the extentions\npgListGeom(con, geog = TRUE) # list vector data table\npgListRast(con) # list raster data table\npgWriteRast(con, c(\"schema\", \"testraster\"), test)\n\n\n\n\n\n\n\nQGIS connects PostGIS climate database"
  }
]